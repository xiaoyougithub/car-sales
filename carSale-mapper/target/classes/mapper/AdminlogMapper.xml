<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.AdminlogDao">
    <!-- Adminlog的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Adminlog_Map" type="com.bean.Adminlog">
        <id column="logId" property="logId" />
        <result column="empId" property="empId" />
        <result column="companyId" property="companyId" />
        <result column="logContent" property="logContent" />
        <result column="logTime" property="logTime" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:adminlog的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="adminlog_Column">
        adminlog.logId as logId
        ,adminlog.empId as empId
        ,adminlog.companyId as companyId
        ,adminlog.logContent as logContent
        ,adminlog.logTime as logTime
    </sql>

    <!--获得类名为:Adminlog对应的数据库表的数据总行数 -->
    <select id="getAdminlogRowCount" parameterType="com.common.Assist" resultType="java.lang.Long">
        select count(logId) from adminlog
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Adminlog对应数据库中表的数据集合 -->
    <select id="selectAdminlog" parameterType="com.common.Assist"  resultMap="result_Adminlog_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="adminlog_Column" /> 
            </otherwise>
        </choose>
        from adminlog
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT logId as primary_key FROM adminlog
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=adminlog.logId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Adminlog对象,以参数Adminlog对象中不为空的属性作为条件进行查询-->
    <select id="selectAdminlogByObj" parameterType="com.bean.Adminlog" resultMap="result_Adminlog_Map">
        select 
            <include refid="adminlog_Column" /> 
        from adminlog
        <where>
            <if test="logTime != null "> and adminlog.logTime = #{logTime}</if>
            <if test="logContent != null "> and adminlog.logContent = #{logContent}</if>
            <if test="companyId != null "> and adminlog.companyId = #{companyId}</if>
            <if test="empId != null "> and adminlog.empId = #{empId}</if>
            <if test="logId != null "> and adminlog.logId = #{logId}</if>
        </where>
    </select> 

    <!-- 通过Adminlog的id获得对应数据库中表的数据对象-->
    <select id="selectAdminlogById" parameterType="java.lang.Integer" resultMap="result_Adminlog_Map">
        select 
            <include refid="adminlog_Column" /> 
        from adminlog
        where adminlog.logId = #{id}
    </select> 

    <!-- 将Adminlog插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertAdminlog" parameterType="com.bean.Adminlog">
        insert into adminlog(logId,empId,companyId,logContent,logTime) 
        values(#{logId},#{empId},#{companyId},#{logContent},#{logTime})
    </insert>

    <!-- 将Adminlog中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyAdminlog" parameterType="com.bean.Adminlog">
        insert into adminlog
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="logId != null">logId,</if>
            <if test="empId != null">empId,</if>
            <if test="companyId != null">companyId,</if>
            <if test="logContent != null">logContent,</if>
            <if test="logTime != null">logTime,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="logId != null"> #{logId},</if>
            <if test="empId != null"> #{empId},</if>
            <if test="companyId != null"> #{companyId},</if>
            <if test="logContent != null"> #{logContent},</if>
            <if test="logTime != null"> #{logTime},</if>
        </trim>
    </insert>

    <!-- 将Adminlog批量插入到对应数据库的表中-->
    <insert id="insertAdminlogByBatch" parameterType="ArrayList">
        insert into adminlog(logId,empId,companyId,logContent,logTime) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.logId},#{item.empId},#{item.companyId},#{item.logContent},#{item.logTime})
        </foreach>
    </insert>

    <!-- 通过Adminlog的id将数据库表中对应的数据删除-->
    <delete id="deleteAdminlogById" parameterType="java.lang.Integer">
        delete from adminlog
        where logId = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Adminlog对应的数据库表的数据删除-->
    <delete id="deleteAdminlog" parameterType="com.common.Assist">
        delete from adminlog
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Adminlog的id将Adminlog的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateAdminlogById" parameterType="com.bean.Adminlog">
        update adminlog set
            empId=#{empId}
            ,companyId=#{companyId}
            ,logContent=#{logContent}
            ,logTime=#{logTime}
        where logId=#{logId}
    </update>

    <!-- 通过Adminlog的id将Adminlog中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyAdminlogById" parameterType="com.bean.Adminlog">
        update adminlog
        <set>
            <if test="empId != null">
                empId=#{empId},
            </if>
            <if test="companyId != null">
                companyId=#{companyId},
            </if>
            <if test="logContent != null">
                logContent=#{logContent},
            </if>
            <if test="logTime != null">
                logTime=#{logTime},
            </if>
        </set>
        where logId=#{logId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Adminlog中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateAdminlog" parameterType="map">
        update adminlog
        <set>
                logId=#{enti.logId},
                empId=#{enti.empId},
                companyId=#{enti.companyId},
                logContent=#{enti.logContent},
                logTime=#{enti.logTime},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Adminlog中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyAdminlog" parameterType="map">
        update adminlog
        <set>
            <if test="enti.logId != null">
                logId=#{enti.logId},
            </if>
            <if test="enti.empId != null">
                empId=#{enti.empId},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId},
            </if>
            <if test="enti.logContent != null">
                logContent=#{enti.logContent},
            </if>
            <if test="enti.logTime != null">
                logTime=#{enti.logTime},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>